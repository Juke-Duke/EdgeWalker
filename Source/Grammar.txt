Program
    : EdgeDeclaration* AliasDeclaration* ProcedureBody
    ;

Library
    : EdgeDeclaration* AliasDeclaration* ModuleDeclaration+
    ;

EdgeDeclaration
    : 'edge' EdgePath ';'
    ;

AliasDeclaration
    : 'alias' Identifier '=' (ModulePath | TypePath) ';'
    ;

EdgePath
    : ModulePath
    | ModulePath '.' Identifier
    | ModulePath '.' Identifier '<' ','* '>'
    ;

Identifier
    : [\x]+ [\x\d_]*
    ;

ModulePath
    : Identifier ('/' Identifier)*
    ;

TypePath
    : (ModulePath '.')? Identifier
    | (ModulePath '.')? Identifier '<' Type (',' Type)* '>'
    ;

Type
    : TypePath '?'?
    | TupleType '?'?
    | ListType '?'?
    | SetType '?'?
    | MapType '?'?
    | LambdaType
    ;

TupleType
    : '(' ')'
    | '(' Type (',' Type)* ')'
    ;

ListType
    : '[' Type ']'
    ;

SetType
    : '{' Type '}'
    ;

MapType
    : '{' Type ':' Type '}'
    ;

LambdaType
    : 'async'? '(' Parameters? ')' '?'? ':' Type
    | 'async'? '<' TypeParameters '>' '(' Parameters? ')' '?'? ':' Type
    ;

ModuleDeclaration
    : Attribute* 'module' ModulePath ';'
    | SubModuleDeclaration
    ;

SubModuleDeclaration
    : Attribute* 'module' ModulePath '{' ModuleBody? '}'
    ;

ModuleBody
    : VariableDeclaration*
    | ConstantDeclaration*
    | ProcedureDeclaration*
    | InterfaceDeclaration*
    | TypeDeclaration*
    | ExtensionDeclaration*
    | UnionDeclaration*
    | EnumDeclaration*
    ;

Attribute
    : '@' TypePath
    | '@' TypePath '(' Arguments ')'
    ;

Arguments
    : Argument (',' Argument)*
    ;

Argument
    : Identifier ':' Expression
    ;

VariableDeclaration
    : Attribute* 'var' Identifier ':' Type ';'
    | Attribute* 'var' Identifier '=' Expression ';'
    | Attribute* 'var' Identifier ':' Type '=' Expression ';'
    ;

ConstantDeclaration
    : Attribute* 'const' Identifier '=' Expression ';'
    | Attribute* 'const' Identifier ':' Type '=' Expression ';'
    ;

ProcedureDeclaration
    : Attribute* 'async'? 'proc' Identifier '(' Parameters? ')' ':' Type '=>' Expression ';'
    | Attribute* 'async'? 'proc' Identifier '(' Parameters? ')' ':' Type '{' ProcedureBody? '}'
    | Attribute* 'async'? 'proc' Identifier '<' TypeParameters '>' '(' Parameters? ')' ':' Type '=>' Expression ';'
    | Attribute* 'async'? 'proc' Identifier '<' TypeParameters '>' '(' Parameters? ')' ':' Type '{' ProcedureBody? '}'
    ;

Parameters
    : Parameter (',' Parameter)*
    ;

Parameter
    : Attribute* Identifier ':' Type
    | Attribute* Identifier ':' Type '..'
    | Attribute* Identifier ':' Type '=' Expression
    ;

TypeParameters
    : TypeParameter (',' TypeParameter)*
    ;

TypeParameter
    : Attribute* Identifier
    | Attribute* Identifier ':' TypePath ('&' TypePath)*
    ;

ProcedureBody
    : VariableDeclaration*
    | ConstantDeclaration*
    | ProcedureDeclaration*
    | IfExpression*
    | MatchExpression*
    | IterationExpression*
    | ReturnStatement
    | ExpressionStatement
    ;

ExpressionStatement
    : AssignmentExpression ';'
    | UnaryPostfixExpression ';'
    ;

IfExpression
    : 'if' Expression '{' ControlFlowBody '}' ('else' 'if' '{' ControlFlowBody '}')* ('else' '{' ControlFlowBody '}')?
    ;

MatchExpression
    : 'match' Expression '{' MatchCases '}'
    ;

MatchCases
    : MatchCase (',' MatchCase)*
    ;

MatchCase
    : (Expression | '_') '=>' Expression ';'
    | (Expression | '_') '=>' '{' ControlFlowBody '}'
    ;

IterationExpression
    : (Label ':')? LoopExpression
    | (Label ':')? WhileExpression
    | (Label ':')? DoWhileExpression
    | (Label ':')? ForExpression
    ;

Label
    : \w
    ;

LoopExpression
    : 'loop' '{' ControlFlowBody '}'
    ;

WhileExpression
    : 'while' Expression '{' ControlFlowBody '}'
    ;

DoWhileExpression
    : 'do' '{' ControlFlowBody '}' 'while' Expression ';'
    ;

ForExpression
    : 'for' Identifier 'in' Expression ('if' Expression)? '{' ControlFlowBody '}'
    ;

ControlFlowBody
    : VariableDeclaration*
    | ConstantDeclaration*
    | IfExpression*
    | MatchExpression*
    | IterationExpression*
    | ContinueStatement
    | BreakStatement
    | ReturnStatement
    ;

ContinueStatement
    : 'continue' ';'
    ;

BreakStatement
    : 'break' Label? ';'
    | 'break' Expression? ';'
    ;

ReturnStatement
    : 'return' Expression? ';'
    ;

InterfaceDeclaration
    : Attribute* 'interface' Identifier '{' InterfaceBody? '}'
    | Attribute* 'interface' Identifier '<' TypeParameters'>' '{' InterfaceBody '}'
    ;

InterfaceBody
    : PropertySignature*
    | IndexerSignature*
    | MethodSignature*
    | ConstructorSignature*
    | ProcedureSignature*
    ;

PropertySignature
    : Attribute* Identifier ':' Type '{' AccessorSignature (',' AccessorSignature)? '}'
    ;

IndexerSignature
    : Attribute* '[' Parameters? ']' ':' Type '{' AccessorSignature (',' AccessorSignature)? '}'
    ;

AccessorSignature
    : Attribute* 'get' '(' Mutability ')' ';'
    | Attribute* 'set' '(' Mutability ')' ';'
    ;

Mutability
    : 'var' 'self'
    | 'const' 'self'
    ;

MethodSignature
    : Attribute* 'proc' Identifier '(' Mutability (',' Parameters)? ')' ':' Type ';'
    | Attribute* 'proc' Identifier '<' TypeParameters '>' '(' Mutability (',' Parameters)? ')' ':' Type ';'
    ;

ConstructorSignature
    : Attribute* Identifier '(' ConstructorParameters? ')' ';'
    ;

ConstructorParameters
    : (PrimaryParameter | Parameter) (',' (PrimaryParameter | Parameter))*
    ;

PrimaryParameter
    : Attribute* 'self' '.' Identifier
    | Attribute* 'self' '.' Identifier '=' Expression
    ;

TypeDeclaration
    : Attribute* 'type' Identifier ';'
    | Attribute* 'type' Identifier '{' Component* '}'
    | Attribute* 'type' Identifier '<' TypeParameters '>' '{' Component* '}'
    ;

Component
    : Attribute* Identifier ':' Type ';'
    ;

ExtensionDeclaration
    : Attribute* 'extend' Type '{' ExtensionBody? '}'
    | Attribute* 'extend' Type 'as' TypePath '{' ExtensionBody? '}'
    | Attribute* 'extend' Type '<' TypeParameters '>' '{' ExtensionBody? '}'
    | Attribute* 'extend' Type '<' TypeParameters '>' 'as' TypePath '{' ExtensionBody? '}'
    ;

ExtensionBody
    : VariableDeclaration*
    | ConstantDeclaration*
    | PropertyDeclaration*
    | ConstructorDeclaration*
    | MethodDeclaration*
    | ProcedureDeclaration*
    ;

PropertyDeclaration
    : Attribute* Identifier ':' Type '{' AccessorDeclaration (',' AccessorDeclaration)? '}'
    ;

AccessorDeclaration
    : Attribute* 'get' '(' Mutability ')' '=>' Expression ';'
    | Attribute* 'get' '(' Mutability ')' '{' ProcedureBody? '}'
    | Attribute* 'set' '(' Mutability ')' '=>' Expression ';'
    | Attribute* 'set' '(' Mutability ')' '{' ProcedureBody? '}'
    ;

ConstructorDeclaration
    : Attribute* Identifier '(' ConstructorParameters? ')' ('as' InvocationExpression)? ';'
    | Attribute* Identifier '(' ConstructorParameters? ')' ('as' InvocationExpression)? '=>' Expression ';'
    | Attribute* Identifier '(' ConstructorParameters? ')' ('as' InvocationExpression)? '{' ProcedureBody? '}'
    ;

MethodDeclaration
    : Attribute* 'async'? 'proc' Identifier '(' MethodParameters ')' ':' Type '=>' Expression ';'
    | Attribute* 'async'? 'proc' Identifier '(' MethodParameters ')' ':' Type '{' ProcedureBody? '}'
    | Attribute* 'async'? 'proc' Identifier '<' TypeParameters '>' '(' MethodParameters ')' ':' Type '=>' Expression ';'
    | Attribute* 'async'? 'proc' Identifier '<' TypeParameters '>' '(' MethodParameters ')' ':' Type '{' ProcedureBody? '}'
    ;

MethodParameters
    : Mutability (',' Parameter)*
    ;

UnionDeclaration
    : Attribute* 'union' Identifier '=' UnionTypes ';'
    ;

UnionTypes
    : '|'? Attribute* Type ('|' Attribute* Type)*
    ;

EnumDeclaration
    : Attribute* 'enum' Identifier ('as' Type)? '{' EnumBody? '}'
    ;

EnumBody
    : Attribute* Identifier ('=' Expression)? (',' Attribute* Identifier ('=' Expression)?)*
    ;

Expression
    : ('try' | 'await') AssignmentExpression
    ;

AssignmentExpression
    : LogicalOrExpression ('=' AssignmentExpression)?
    | LogicalOrExpression ('+=' AssignmentExpression)?
    | LogicalOrExpression ('-=' AssignmentExpression)?
    | LogicalOrExpression ('*=' AssignmentExpression)?
    | LogicalOrExpression ('/=' AssignmentExpression)?
    | LogicalOrExpression ('%=' AssignmentExpression)?
    | LogicalOrExpression ('&=' AssignmentExpression)?
    | LogicalOrExpression ('|=' AssignmentExpression)?
    | LogicalOrExpression ('^=' AssignmentExpression)?
    | LogicalOrExpression ('<<=' AssignmentExpression)?
    | LogicalOrExpression ('>>=' AssignmentExpression)?
    | LogicalOrExpression ('>>>=' AssignmentExpression)?
    ;

LogicalOrExpression
    : LogicalAndExpression ('||' LogicalAndExpression)*
    ;

LogicalAndExpression
    : EqualityExpression ('&&' EqualityExpression)*
    ;

EqualityExpression
    : RelationalExpression ('==' RelationalExpression)*
    | RelationalExpression ('!=' RelationalExpression)*
    ;

RelationalExpression
    : BitwiseOrExpression ('<' BitwiseOrExpression)*
    | BitwiseOrExpression ('>' BitwiseOrExpression)*
    | BitwiseOrExpression ('<=' BitwiseOrExpression)*
    | BitwiseOrExpression ('>=' BitwiseOrExpression)*
    | BitwiseOrExpression IsExpression*
    | BitwiseOrExpression AsExpression*
    ;

IsExpression
    : 'is' TypePath Identifier?
    ;

AsExpression
    : 'as' TypePath
    ;

BitwiseOrExpression
    : BitwiseXorExpression ('|' BitwiseXorExpression)*
    ;

BitwiseXorExpression
    : BitwiseAndExpression ('^' BitwiseAndExpression)*
    ;

BitwiseAndExpression
    : ShiftExpression ('&' ShiftExpression)*
    ;

ShiftExpression
    : AdditiveExpression ('<<' AdditiveExpression)*
    | AdditiveExpression ('>>' AdditiveExpression)*
    | AdditiveExpression ('>>>' AdditiveExpression)*
    ;

AdditiveExpression
    : MultiplicativeExpression ('+' MultiplicativeExpression)*
    | MultiplicativeExpression ('-' MultiplicativeExpression)*
    ;

MultiplicativeExpression
    : UnaryExpression ('*' UnaryExpression)*
    | UnaryExpression ('/' UnaryExpression)*
    | UnaryExpression ('%' UnaryExpression)*
    ;

ExpontentiationExpression
    : UnaryPrefixExpression ('**' ExpontentiationExpression)*
    ;

UnaryPrefixExpression
    : UnaryPostfixExpression
    | '!' UnaryPrefixExpression
    | '~' UnaryPrefixExpression
    | '+' UnaryPrefixExpression
    | '-' UnaryPrefixExpression
    ;

UnaryPostfixExpression
    : PrimaryExpression MemberAccessExpression*
    | PrimaryExpression IndexerExpression*
    | PrimaryExpression InvocationExpression*
    ;

MemberAccessExpression
    : '.' Identifier
    | '?.' Identifier
    ;

IndexerExpression
    : '[' Expression ']'
    | '?[' Expression ']'
    ;

InvocationExpression
    : '(' Arguments? ')'
    | '?(' Arguments? ')'
    ;

PrimaryExpression
    : Literal
    | Identifier
    | '(' Expression ')'
    ;

Literal
    : NullLiteral
    | BooleanLiteral
    | NumericLiteral
    | CharacterLiteral
    | TextLiteral
    | RegexLiteral
    | TupleLiteral
    | ListLiteral
    | SetLiteral
    | MapLiteral
    | RangeLiteral
    ;

NullLiteral
    : 'null'
    ;

BooleanLiteral
    : 'true' | 'false'
    ;

NumericLiteral
    : IntegerLiteral
    | FloatLiteral
    ;

IntegerLiteral
    : DecimalLiteral
    | BinaryLiteral
    | HexadecimalLiteral
    ;

DecimalLiteral
    : \d ('''? \d)*
    ;

BinaryLiteral
    : '0b' [01] ('''? [01])*
    ;

HexadecimalLiteral
    : '0x' [0-9a-fA-F] ('''? [0-9a-fA-F])*
    ;

FloatLiteral
    : \d ('''? \d)* '.' \d ('''? \d)*
    ;

CharacterLiteral
    : ''' \w '''
    ;

TextLiteral
    : '"' \w* '"'
    ;

RewTextLiteral
    : 'r"' \w* '"'
    ;

TupleLiteral
    : '(' ')'
    | '(' Expression (',' Expression)* ')'
    ;

ListLiteral
    : '[' ']'
    | '[' Expression (',' Expression)* ']'
    ;

SetLiteral
    : '{' '}'
    | '{' Expression (',' Expression)* '}'
    ;

MapLiteral
    : '{' ':' '}'
    | '{' Expression ':' Expression (',' Expression ':' Expression)* '}'
    ;

RangeLiteral
    : Expression? '..' Expression?
    | Expression? '..=' Expression
    ;
